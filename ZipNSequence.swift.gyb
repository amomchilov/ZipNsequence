%{
    arity = int(arityS)
    arities = range(1, arity+1)

    SequenceName = "Zip" + arityS + "Sequence"
    IteratorName = "Zip" + arityS + "Iterator"
    ZipFnName = "zip(" + ("_:"*arity) + ")"

    comma = lambda x: "," if x != arity else ""
}%

/// Creates a sequence of tuples built out of ${arity} underlying sequences.
///
/// In the `${SequenceName}` instance returned by this function, the elements of
/// the *i*th tuple are the *i*th elements of each underlying sequence. The
/// following example uses the `zip(_:_:)` function to iterate over an array
/// of strings and a countable range at the same time:
///
///     let words = ["one", "two", "three", "four"]
///     let numbers = 1...4
///
///     for (word, number) in zip(words, numbers) {
///         print("\(word): \(number)")
///     }
///     // Prints "one: 1"
///     // Prints "two: 2
///     // Prints "three: 3"
///     // Prints "four: 4"
///
/// If the ${arity} sequences passed to `${ZipFnName}` are different lengths, the
/// resulting sequence is the same length as the shortest sequence. In this
/// example, the resulting array is the same length as `words`:
///
///     let naturalNumbers = 1...Int.max
///     let zipped = Array(zip(words, naturalNumbers))
///     // zipped == [("one", 1), ("two", 2), ("three", 3), ("four", 4)]
///
/// - Parameters:
% for i in arities:
///   - sequence${i}: The sequence or collection in position ${i} of each tuple.
% end
/// - Returns: A sequence of tuple pairs, where the elements of each pair are
///   corresponding elements of `sequence1` and `sequence2`.
public func zip<
% for i in arities:
Sequence${i} : Sequence${comma(i)}
% end
>(
% for i in arities:
  _ sequence${i}: Sequence${i}${comma(i)}
% end

) -> ${SequenceName}<
% for i in arities:
Sequence${i}${comma(i)}
% end
> {
  return ${SequenceName}(
% for i in arities:
    _sequence${i}: sequence${i}${comma(i)}
% end
  )
}

/// An iterator for `${SequenceName}`.
public struct ${IteratorName}<
% for i in arities:
  Iterator${i} : IteratorProtocol${comma(i)}
% end
> : IteratorProtocol {
  /// The type of element returned by `next()`.
  public typealias Element = (
% for i in arities:
      Iterator${i}.Element${comma(i)}
% end
  )

  /// Creates an instance around the underlying iterators.
  internal init(
% for i in arities:
      _ iterator${i}: Iterator${i}${comma(i)}
% end
  ) {
% for i in arities:
    _baseStream${i} = iterator${i}
% end
  }

  /// Advances to the next element and returns it, or `nil` if no next element
  /// exists.
  ///
  /// Once `nil` has been returned, all subsequent calls return `nil`.
  public mutating func next() -> Element? {
    // The next() function needs to track if it has reached the end.  If we
    // didn't, and the first sequence is longer than the second, then when we
    // have already exhausted the second sequence, on every subsequent call to
    // next() we would consume and discard one additional element from the
    // first sequence, even though next() had already returned nil.

    if _reachedEnd {
      return nil
    }

    guard
% for i in arities:
        let element${i} = _baseStream${i}.next()${comma(i)}
% end
    else {
      _reachedEnd = true
      return nil
    }

    return (
% for i in arities:
        element${i}${comma(i)}
% end
    )
  }

% for i in arities:
  internal var _baseStream${i}: Iterator${i}
% end
  internal var _reachedEnd: Bool = false
}

/// A sequence of pairs built out of two underlying sequences.
///
/// In a `${SequenceName}` instance, the elements of the *i*th pair are the *i*th
/// elements of each underlying sequence. To create a `${SequenceName}` instance,
/// use the `${ZipFnName}` function.
///
/// The following example uses the `zip(_:_:)` function to iterate over an
/// array of strings and a countable range at the same time:
///
///     let words = ["one", "two", "three", "four"]
///     let numbers = 1...4
///
///     for (word, number) in zip(words, numbers) {
///         print("\(word): \(number)")
///     }
///     // Prints "one: 1"
///     // Prints "two: 2
///     // Prints "three: 3"
///     // Prints "four: 4"
///
/// - SeeAlso: `${ZipFnName}`
public struct ${SequenceName}<
% for i in arities:
Sequence${i} : Sequence${comma(i)}
% end
>
  : Sequence {

% for i in arities:
  public typealias Stream${i} = Sequence${i}.Iterator
% end

  /// A type whose instances can produce the elements of this
  /// sequence, in order.
  public typealias Iterator = ${IteratorName}<
% for i in arities:
    Stream${i}${comma(i)}
% end
>

  @available(*, unavailable, renamed: "Iterator")
  public typealias Generator = Iterator

  /// Creates an instance that makes pairs of elements from `sequence1` and
  /// `sequence2`.
  public // @testable
  init(
% for i in arities:
    _sequence${i} sequence${i}: Sequence${i}${comma(i)}
% end
  ) {
% for i in arities:
    _sequence${i} = sequence${i}
% end
  }

  /// Returns an iterator over the elements of this sequence.
  public func makeIterator() -> Iterator {
    return Iterator(
% for i in arities:
      _sequence${i}.makeIterator()${comma(i)}
% end
    )
  }

% for i in arities:
  internal let _sequence${i}: Sequence${i}
% end
}